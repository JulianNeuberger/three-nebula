/*
 * EventDispatcher
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 **/
export default class EventDispatcher {
  constructor() {
    this.listeners = null;
  }

  set listeners(listeners) {
    this._listeners = listeners;
  }

  get listeners() {
    return this._listeners;
  }

  addEventListener(type, listener) {
    if (!this.listeners) {
      this.listeners = {};
    } else {
      this.removeEventListener(type, listener);
    }

    if (!this.listeners[type]) this.listeners[type] = [];
    this.listeners[type].push(listener);
    return listener;
  }

  removeEventListener(type, listener) {
    if (!this.listeners) return;
    if (!this.listeners[type]) return;
    var arr = this.listeners[type];

    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] == listener) {
        if (l == 1) {
          delete this.listeners[type];
        } // allows for faster checks.
        else {
          arr.splice(i, 1);
        }

        break;
      }
    }
  }

  removeAllEventListeners(type) {
    if (!type) this.listeners = null;else if (this.listeners) delete this.listeners[type];
  }

  dispatchEvent(eventName, eventTarget) {
    var ret = false,
        listeners = this.listeners;

    if (eventName && listeners) {
      var arr = listeners[eventName];
      if (!arr) return ret;
      arr = arr.slice(); //Should use a copy into a temporary here instead...
      // to avoid issues with items being removed or added during the dispatch

      var handler,
          i = arr.length;

      while (i--) {
        handler = arr[i];
        ret = ret || handler(eventTarget);
      }
    }

    return !!ret;
  }

  hasEventListener(type) {
    var listeners = this.listeners;
    return !!(listeners && listeners[type]);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvRXZlbnREaXNwYXRjaGVyLmpzIl0sIm5hbWVzIjpbIkV2ZW50RGlzcGF0Y2hlciIsImNvbnN0cnVjdG9yIiwibGlzdGVuZXJzIiwiX2xpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHVzaCIsImFyciIsImkiLCJsIiwibGVuZ3RoIiwic3BsaWNlIiwicmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnROYW1lIiwiZXZlbnRUYXJnZXQiLCJyZXQiLCJzbGljZSIsImhhbmRsZXIiLCJoYXNFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsZUFBZSxNQUFNQSxlQUFOLENBQXNCO0FBQ25DQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxTQUFMLEdBQWlCLElBQWpCO0FBQ0Q7O0FBRVksTUFBVEEsU0FBUyxDQUFDQSxTQUFELEVBQVk7QUFDdkIsU0FBS0MsVUFBTCxHQUFrQkQsU0FBbEI7QUFDRDs7QUFFWSxNQUFUQSxTQUFTLEdBQUc7QUFDZCxXQUFPLEtBQUtDLFVBQVo7QUFDRDs7QUFFREMsRUFBQUEsZ0JBQWdCLENBQUNDLElBQUQsRUFBT0MsUUFBUCxFQUFpQjtBQUMvQixRQUFJLENBQUMsS0FBS0osU0FBVixFQUFxQjtBQUNuQixXQUFLQSxTQUFMLEdBQWlCLEVBQWpCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS0ssbUJBQUwsQ0FBeUJGLElBQXpCLEVBQStCQyxRQUEvQjtBQUNEOztBQUVELFFBQUksQ0FBQyxLQUFLSixTQUFMLENBQWVHLElBQWYsQ0FBTCxFQUEyQixLQUFLSCxTQUFMLENBQWVHLElBQWYsSUFBdUIsRUFBdkI7QUFDM0IsU0FBS0gsU0FBTCxDQUFlRyxJQUFmLEVBQXFCRyxJQUFyQixDQUEwQkYsUUFBMUI7QUFFQSxXQUFPQSxRQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLG1CQUFtQixDQUFDRixJQUFELEVBQU9DLFFBQVAsRUFBaUI7QUFDbEMsUUFBSSxDQUFDLEtBQUtKLFNBQVYsRUFBcUI7QUFDckIsUUFBSSxDQUFDLEtBQUtBLFNBQUwsQ0FBZUcsSUFBZixDQUFMLEVBQTJCO0FBRTNCLFFBQUlJLEdBQUcsR0FBRyxLQUFLUCxTQUFMLENBQWVHLElBQWYsQ0FBVjs7QUFFQSxTQUFLLElBQUlLLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0YsR0FBRyxDQUFDRyxNQUF4QixFQUFnQ0YsQ0FBQyxHQUFHQyxDQUFwQyxFQUF1Q0QsQ0FBQyxFQUF4QyxFQUE0QztBQUMxQyxVQUFJRCxHQUFHLENBQUNDLENBQUQsQ0FBSCxJQUFVSixRQUFkLEVBQXdCO0FBQ3RCLFlBQUlLLENBQUMsSUFBSSxDQUFULEVBQVk7QUFDVixpQkFBTyxLQUFLVCxTQUFMLENBQWVHLElBQWYsQ0FBUDtBQUNELFNBRkQsQ0FHQTtBQUhBLGFBSUs7QUFDSEksVUFBQUEsR0FBRyxDQUFDSSxNQUFKLENBQVdILENBQVgsRUFBYyxDQUFkO0FBQ0Q7O0FBQ0Q7QUFDRDtBQUNGO0FBQ0Y7O0FBRURJLEVBQUFBLHVCQUF1QixDQUFDVCxJQUFELEVBQU87QUFDNUIsUUFBSSxDQUFDQSxJQUFMLEVBQVcsS0FBS0gsU0FBTCxHQUFpQixJQUFqQixDQUFYLEtBQ0ssSUFBSSxLQUFLQSxTQUFULEVBQW9CLE9BQU8sS0FBS0EsU0FBTCxDQUFlRyxJQUFmLENBQVA7QUFDMUI7O0FBRURVLEVBQUFBLGFBQWEsQ0FBQ0MsU0FBRCxFQUFZQyxXQUFaLEVBQXlCO0FBQ3BDLFFBQUlDLEdBQUcsR0FBRyxLQUFWO0FBQUEsUUFDRWhCLFNBQVMsR0FBRyxLQUFLQSxTQURuQjs7QUFHQSxRQUFJYyxTQUFTLElBQUlkLFNBQWpCLEVBQTRCO0FBQzFCLFVBQUlPLEdBQUcsR0FBR1AsU0FBUyxDQUFDYyxTQUFELENBQW5CO0FBRUEsVUFBSSxDQUFDUCxHQUFMLEVBQVUsT0FBT1MsR0FBUDtBQUVWVCxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ1UsS0FBSixFQUFOLENBTDBCLENBS0E7QUFDMUI7O0FBRUEsVUFBSUMsT0FBSjtBQUFBLFVBQ0VWLENBQUMsR0FBR0QsR0FBRyxDQUFDRyxNQURWOztBQUdBLGFBQU9GLENBQUMsRUFBUixFQUFZO0FBQ1ZVLFFBQUFBLE9BQU8sR0FBR1gsR0FBRyxDQUFDQyxDQUFELENBQWI7QUFFQVEsUUFBQUEsR0FBRyxHQUFHQSxHQUFHLElBQUlFLE9BQU8sQ0FBQ0gsV0FBRCxDQUFwQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxDQUFDLENBQUNDLEdBQVQ7QUFDRDs7QUFFREcsRUFBQUEsZ0JBQWdCLENBQUNoQixJQUFELEVBQU87QUFDckIsUUFBSUgsU0FBUyxHQUFHLEtBQUtBLFNBQXJCO0FBRUEsV0FBTyxDQUFDLEVBQUVBLFNBQVMsSUFBSUEsU0FBUyxDQUFDRyxJQUFELENBQXhCLENBQVI7QUFDRDs7QUFoRmtDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogRXZlbnREaXNwYXRjaGVyXHJcbiAqIFZpc2l0IGh0dHA6Ly9jcmVhdGVqcy5jb20vIGZvciBkb2N1bWVudGF0aW9uLCB1cGRhdGVzIGFuZCBleGFtcGxlcy5cclxuICpcclxuICoqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnREaXNwYXRjaGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHNldCBsaXN0ZW5lcnMobGlzdGVuZXJzKSB7XHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XHJcbiAgfVxyXG5cclxuICBnZXQgbGlzdGVuZXJzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVycztcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgIGlmICghdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXSkgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSBbXTtcclxuICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xyXG5cclxuICAgIHJldHVybiBsaXN0ZW5lcjtcclxuICB9XHJcblxyXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgIGlmICghdGhpcy5saXN0ZW5lcnMpIHJldHVybjtcclxuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHJldHVybjtcclxuXHJcbiAgICB2YXIgYXJyID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgIGlmIChhcnJbaV0gPT0gbGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAobCA9PSAxKSB7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5lcnNbdHlwZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsbG93cyBmb3IgZmFzdGVyIGNoZWNrcy5cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGFyci5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVBbGxFdmVudExpc3RlbmVycyh0eXBlKSB7XHJcbiAgICBpZiAoIXR5cGUpIHRoaXMubGlzdGVuZXJzID0gbnVsbDtcclxuICAgIGVsc2UgaWYgKHRoaXMubGlzdGVuZXJzKSBkZWxldGUgdGhpcy5saXN0ZW5lcnNbdHlwZV07XHJcbiAgfVxyXG5cclxuICBkaXNwYXRjaEV2ZW50KGV2ZW50TmFtZSwgZXZlbnRUYXJnZXQpIHtcclxuICAgIHZhciByZXQgPSBmYWxzZSxcclxuICAgICAgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnM7XHJcblxyXG4gICAgaWYgKGV2ZW50TmFtZSAmJiBsaXN0ZW5lcnMpIHtcclxuICAgICAgdmFyIGFyciA9IGxpc3RlbmVyc1tldmVudE5hbWVdO1xyXG5cclxuICAgICAgaWYgKCFhcnIpIHJldHVybiByZXQ7XHJcblxyXG4gICAgICBhcnIgPSBhcnIuc2xpY2UoKTsgICAgICAgIC8vU2hvdWxkIHVzZSBhIGNvcHkgaW50byBhIHRlbXBvcmFyeSBoZXJlIGluc3RlYWQuLi5cclxuICAgICAgLy8gdG8gYXZvaWQgaXNzdWVzIHdpdGggaXRlbXMgYmVpbmcgcmVtb3ZlZCBvciBhZGRlZCBkdXJpbmcgdGhlIGRpc3BhdGNoXHJcblxyXG4gICAgICB2YXIgaGFuZGxlcixcclxuICAgICAgICBpID0gYXJyLmxlbmd0aDtcclxuXHJcbiAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICBoYW5kbGVyID0gYXJyW2ldO1xyXG5cclxuICAgICAgICByZXQgPSByZXQgfHwgaGFuZGxlcihldmVudFRhcmdldCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gISFyZXQ7XHJcbiAgfVxyXG5cclxuICBoYXNFdmVudExpc3RlbmVyKHR5cGUpIHtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycztcclxuXHJcbiAgICByZXR1cm4gISEobGlzdGVuZXJzICYmIGxpc3RlbmVyc1t0eXBlXSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==